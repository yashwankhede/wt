Q1.

Htmlfile

<selectid=”employee-list”>
<optionvalue=””>Select an employee</option>
<!—Populate this drop down with employee names using PHP
</select>
<divid=”employee-details”>
<!—Employee details will be displayed here
</div>

Ajaxfile

$(document).ready(function() {
  // Add event listener to the select dropdown
  $('#employee-list').change(function() {
    var selectedEmployee = $(this).val();
    // Make an AJAX request to fetch employee details
    $.ajax({
      url: 'empdetails.php',
      type: 'POST',
      data: { employeeName: selectedEmployee },
      dataType: 'json',
      success: function(response) {
        // Parse the JSON response and display employee details
        var detailsHtml = 'Employee Name: ' + response.ename + '<br>' +
          'Designation: ' + response.designation + '<br>' +
          'Salary: ' + response.salary;
        $('#employee-details').html(detailsHtml);
      },
      error: function(xhr, status, error) {
        console.log('Error:', error);
      }
    });
  });
});


Phpfileasempdetails.php

<?php
// Establish database connection
$conn = pg_connect("host=localhost dbname=database_name user=username password=password");
if (!$conn) {
    die('Connection failed: ' . pg_last_error());
}

// Get the selected employee name from AJAX request
$employeeName = $_POST['employeeName'];

// Query the EMP table for the details of the selected employee
$sql = "SELECT * FROM EMP WHERE ename='$employeeName'";
$result = pg_query($conn, $sql);

if (pg_num_rows($result) > 0) {
    // Build a JSON object with employee details
    $employee = pg_fetch_assoc($result);
    $response = array(
        'ename' => $employee['ename'],
        'designation' => $employee['designation'],
        'salary' => $employee['salary']
    );
    echo json_encode($response);
} else {
    echo "Employee not found";
}

// Close database connection
pg_close($conn);
?>


=========================
Q2.


import re
from nltk.tokenize import sent_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Text to summarize
text = "Hello all, Welcome to Python Programming Academy. Python Programming Academy is a nice platform to learn new programming skills. It is difficult to get enrolled in this Academy."

# Preprocess the text to remove special characters and digits
preprocessed_text = re.sub(r'[^a-zA-Z\s]', '', text)

# Tokenize the preprocessed text into sentences
sentences = sent_tokenize(preprocessed_text)

# Calculate the importance score of each sentence using TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(sentences)

similarity_matrix = cosine_similarity(tfidf_matrix)

# Select top N sentences based on their importance score
N = 2
top_sentences = sorted(range(len(similarity_matrix[-1])), key=lambda i: similarity_matrix[-1][i])[-N:]

# Concatenate the top sentences to form the summary
summary = ''
for i in top_sentences:
    summary += sentences[i] + ' '

print(summary)
